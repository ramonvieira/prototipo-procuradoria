!function(){"use strict";function e(){return{restrict:"E",template:'<input id={{id}} ng-model="ngModel" ng-disabled="ngDisabled" ng-class="ngclass" bf-select2="bfConfig" type="hidden" />',scope:{id:"@?",ngModel:"=",ngDisabled:"=",ngChange:"&",ngclass:"=",descriptionField:"@",allowClear:"=",multiple:"@",addValue:"=",search:"=",formatSelection:"&",formatResult:"&",formatValue:"&",minimumResultsForSearch:"@",minimumInputLength:"@",maximumInputLength:"@",placeholder:"=?",dropdownCssClass:"=?",dropdownAutoWidth:"=?",debounceDelay:"@"},compile:function(e,n){var t=angular.isDefined(n.multiple);return t&&e.children("input").attr("multiple",!0),{post:function(e,n,o,i){e.multiple=t;var a=n.children("input");a.on("select2-blur change",function(){e.$apply(i.$setTouched())}).on("change",function(){e.$apply(i.$setDirty())}),e.$watch("placeholder",function(e){a.attr("placeholder",e||" ")}),e.$watch("ngModel",function(n,t){n!==t&&(e.ngChange||angular.noop)()})}}},controller:n,controllerAs:"vm",require:"ngModel"}}function n(e,n){function t(n,t){return e.addValue(n).then(function(n){if(!n)return n;if(n=n.plain?n.plain():n,e.multiple){var o=$(t).select2("data");o.push(n),e.ngModel=o}else e.ngModel=n}),!1}function o(){}function i(n){var t=e.formatResult({data:n});return t||(t=n[e.descriptionField||"descricao"],n.added||(t=_.escape(t))),t}function a(n){return e.formatSelection({data:n})||i(n)}function r(n){var t={};return t[e.descriptionField||"descricao"]=n,t}function l(n){return e.formatValue({data:n})||n}function u(n,t){return n.term=encodeURI(n.term),e.search(n).then(function(e){t({results:e.content,more:e.hasNext})})}var c={allowClear:e.allowClear!==!1,dropdownAutoWidth:e.dropdownAutoWidth===!0,initSelection:o,formatResult:i,formatSelection:a,formatValue:l,formatNewChoice:r,result:u};e.debounceDelay&&(c.result=_.debounce(u,e.debounceDelay)),e.minimumResultsForSearch&&(c.minimumResultsForSearch=e.minimumResultsForSearch),e.minimumInputLength&&(c.minimumInputLength=Number.parseInt(e.minimumInputLength)),e.maximumInputLength&&(c.maximumInputLength=Number.parseInt(e.maximumInputLength)),e.addValue&&(c.onAdd=t),e.dropdownCssClass&&(c.dropdownCssClass=e.dropdownCssClass),e.bfConfig=n.create(c)}angular.module("ui-components").directive("uiSelect",e),e.$inject=[],n.$inject=["$scope","bfc.Select2Config"]}();
!function(){"use strict";function e(){return{restrict:"E",template:'<input type="hidden"/>',scope:{model:"=ngModel",ngDisabled:"=",multiple:"@",options:"=",allowClear:"=?",minimumResultsForSearch:"=?",formatSelection:"&",formatResult:"&",filterResult:"&",placeholder:"@",dropdownCssClass:"=?",dropdownAutoWidth:"=?"},compile:function(){return{post:t}},require:"ngModel"}}function t(e,t,n,r){function l(t){return angular.isDefined(n.formatResult)?e.formatResult({data:t}):t.description}function u(t){return angular.isDefined(n.formatSelection)?e.formatSelection({data:t}):l(t)}function i(e){return e}function o(t,r){var u=r;if(r.children&&r.children.length){var i=a(t,r.children);if(i&&i.length)return u={},angular.forEach(r,function(e,t){this[t]=e},u),u.children=i,u}if(angular.isDefined(n.filterResult)){if(e.filterResult({term:t,value:r}))return u}else if(_.deburr(l(r)).match(new RegExp(_.deburr(_.escapeRegExp(t)),"gi")))return u;return null}function a(e,t){var n=[];return t&&t.length&&t.forEach(function(t){var r=o(e,t);r&&n.push(r)}),n}function s(t){return e.options.then(function(e){t.callback({results:a(t.term,e.values),more:!1})})}var c=angular.isDefined(n.multiple),d=t.find("input");d.select2({query:s,formatResult:l,formatSelection:u,formatValue:i,minimumResultsForSearch:angular.isDefined(e.minimumResultsForSearch)?e.minimumResultsForSearch:0,allowClear:e.allowClear!==!1,multiple:c,placeholder:e.placeholder||" ",dropdownCssClass:e.dropdownCssClass,dropdownAutoWidth:e.dropdownAutoWidth===!0}).on("select2-blur",function(){e.$apply(r.$setTouched()),t.blur()}).on("change",function(){e.$apply(function(){r.$setTouched(),r.$setDirty();var t=d.select2("data"),n=null;n=c?_.map(t,_.property("id"))||[]:_.get(t,"id"),angular.equals(n,e.model)||r.$setViewValue(n)})}),e.$watch("ngDisabled",function(e){d.select2("enable",!e)}),e.$watch("model",function(t){return t?void e.options.then(function(e){var n=null;c?(n=[],t.forEach(function(t){n.push(e[t])})):n=e[t],angular.equals(n,d.select2("data"))||d.select2("data",n)}):void d.select2("data",null)})}angular.module("ui-components").directive("uiSelectEnum",e),e.$inject=[]}();
!function(){"use strict";function e(){return{restrict:"E",template:'<input id={{id}} ng-class="ngclass" type="hidden" placeholder=" " />',require:"ngModel",scope:{id:"@?",model:"=ngModel",ngDisabled:"=",ngclass:"=",allowClear:"=?",trueDescription:"@",falseDescription:"@",dropdownCssClass:"=?",dropdownAutoWidth:"=?"},link:t}}function t(e,t,l,o){function i(e){return"true"===e||"false"!==e&&null}function a(e){return e===!0?"true":e===!1?"false":null}function c(e,t){var n=i(u.select2("val"));t(null===n?null:s[n?0:1])}var s=angular.copy(n),u=t.find("input");u.select2({data:s,initSelection:c,allowClear:e.allowClear!==!1,dropdownCssClass:e.dropdownCssClass,dropdownAutoWidth:e.dropdownAutoWidth===!0}).on("select2-blur",function(){e.$apply(o.$setTouched()),t.blur()}).on("change",function(t){e.$apply(function(){o.$setTouched(),o.$setDirty(),e.model=i(t.val)})}),e.$watch("model",function(e){u.select2("val",a(e))}),e.$watch("ngDisabled",function(e){u.select2("enable",!e)}),e.$watch("trueDescription",function(t){t&&(s[0].text=t,u.select2("val",a(e.model)))}),e.$watch("falseDescription",function(t){t&&(s[1].text=t,u.select2("val",a(e.model)))})}angular.module("ui-components").directive("uiSelectBoolean",e),e.$inject=[];var n=[{id:"true",text:"Sim"},{id:"false",text:"NÃ£o"}]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
