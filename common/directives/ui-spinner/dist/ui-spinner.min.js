!function(){"use strict";function e(){return{restrict:"E",templateUrl:"ui-spinner.directive.html",scope:{ngModel:"=",ngDisabled:"=",uiMin:"=?",uiMax:"=?",step:"=?",placeholder:"=?",debounceDelay:"=?"},compile:function(){return{post:n}},require:"ngModel"}}function n(e,n,i,u){function a(){t.val()&&l({value:t.val(),updateViewValue:!0})}function l(n){n=n||{};for(var i=n.value||"",a=!1,l="",r=0;r<i.length;r++){var o=i[r];"-"!==o||l.length||(a=!0),o.match(/\d/)&&(l+=o)}var d=(a?"-":"")+l,p=Number(d);"-"===d?p=null:(angular.isDefined(e.uiMin)&&p<e.uiMin?p=e.uiMin:angular.isDefined(e.uiMax)&&p>e.uiMax&&(p=e.uiMax),d=String(p)),n.updateViewValue&&u.$setViewValue(p),t.val(d)}e.step=angular.isDefined(e.step)?e.step:1;var t=n.find("input");t.on("keydown",function(n){38===n.keyCode?e.$apply(e.increase):40===n.keyCode&&e.$apply(e.decrease)}),t.on("input",function(){if(!t.val())return void e.$apply(u.$setViewValue(null))}),t.on("blur",function(){if(e.$apply(u.$setTouched()),!t.val())return void e.$apply(u.$setViewValue(null));var n=_.debounce(l,0|e.debounceDelay);e.$apply(n({value:t.val(),updateViewValue:!0}))}),u.$render=function(){if(angular.isUndefined(u.$viewValue)||null===u.$viewValue)return void t.val("");var e=String(u.$viewValue);l({value:e})},e.maxlength=function(){return e.uiMax?e.uiMax.toString().length:9007199254740992},e.increase=function(){l({value:String(e.ngModel+e.step),updateViewValue:!0})},e.decrease=function(){l({value:String(e.ngModel-e.step),updateViewValue:!0})},e.$watchGroup(["uiMin","uiMax"],function(){angular.isDefined(e.uiMin)&&angular.isDefined(e.uiMax)&&e.uiMin>e.uiMax&&console.warn("[ui-spinner] Valor mínimo maior que valor máximo"),a()})}angular.module("ui-components").directive("uiSpinner",e)}();
angular.module("ui-components").run(["$templateCache",function(n){n.put("ui-spinner.directive.html",'<div class="ui-spinner input-group" style="margin-bottom:-4px;">\r\n    <input class="form-control ui-spinner-input" type="text" ng-disabled="ngDisabled" placeholder="{{placeholder}}" maxlength="{{maxlength()}}">\r\n    <a href="" ng-click="!ngDisabled && increase()" ng-disabled="ngDisabled" class="ui-spinner-button ui-spinner-up">\r\n        <span class="icon-caret-up"></span>\r\n    </a>\r\n    <a href="" ng-click="!ngDisabled && decrease()" ng-disabled="ngDisabled" class="ui-spinner-button ui-spinner-down">\r\n        <span class="icon-caret-down"></span>\r\n    </a>\r\n</div>')}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
