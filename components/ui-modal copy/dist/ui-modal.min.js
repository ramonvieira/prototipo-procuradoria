!function(){"use strict";function o(o){function a(o){var a=m(),s={},l=(o.scope||r).$new();l.$modalInstance=s,l.$modalTracker=a,l.size=o.size;var u=i(d)(l);u.modal({focusOnClose:o.focusOnClose,styleClass:o.styleClass,autoFocus:o.autoFocus,backdrop:"static"});var p=n.defer();s.result=p.promise,s.tracker=a,s.dismiss=function(o){u.modal("close"),p.reject(o)},s.close=function(o){u.modal("close"),p.resolve(o)},l.$close=s.close,l.$dismiss=s.dismiss,u.one("hide.modal",function(){p.promise.$$state.status||p.reject(),l.$destroy()});var f=n.all({htmlTemplate:e(o),params:t(o)}).then(function(e){if(s.params=e.params,o.controller){var t={$scope:l,$modalInstance:s,$modalTracker:a},r=o.controller;o.controllerAs&&(r=r+" as "+o.controllerAs),c(r,t)}var n=i(e.htmlTemplate)(l);u.find(".modal-content").html(n)},function(o){s.dismiss()});return a.addPromise(f),s}function e(o){return o.template?n.when(o.template):s.get(o.templateUrl,{cache:l}).then(function(o){return o.data},function(o){throw Error("Não foi possível carregar o template informado para a modal.\n"+o.data)})}function t(a){var e={};return angular.forEach(a.params,function(a,t){angular.isFunction(a)?e[t]=o.invoke(a):e[t]=a}),n.all(e).then(function(o){return o},function(o){throw Error("Não foi possível carregar os parametros informados para a modal.\n"+o.data)})}var r=o.get("$rootScope"),n=o.get("$q"),s=o.get("$http"),l=o.get("$templateCache"),c=o.get("$controller"),i=o.get("$compile"),m=o.get("promiseTracker"),d='<div><div class="modal-dialog" ng-class="\'modal-\'+size"><div class="modal-content" data-bf-loading="$modalTracker"></div></div></div>';return{open:a}}angular.module("ui-components").factory("ui.components.Modal",o),o.$inject=["$injector"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
